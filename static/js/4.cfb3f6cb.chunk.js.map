{"version":3,"sources":["containers/DeliveryTime/index.tsx","components/ScrollWrapper/index.tsx","containers/CartTable/index.tsx","tools/spatial-navigation.ts","pages/Cart/index.tsx","pages/Cart/device.svg"],"names":["withBem","bem","time","className","Typography","type","height","children","itemsCount","maxItemsCount","activeItemIndex","scrollbar","React","useRef","childrenRef","state","setState","useState","topOverlap","bottomOverlap","handleOnScroll","current","topScroll","scrollTop","offsetHeight","clientHeight","useEffect","itemPadding","scrollTo","top","behavior","style","modify","onScroll","ref","Quantity","quantity","focused","FocusableProductCart","withFocusable","connectToStore","name","price","id","index","cart","imagesUrls","clearName","itemsMap","length","Card","src","alt","FocusableButton","ConnectedList","Object","keys","scrollableContent","entries","map","itemId","items","focusKey","key","totalPrice","findNextFocusKey","direction","currentRowIndex","rowItems","elem","find","e","indexOf","currentItemIndex","LEFT_ARROW_KEY_CODE","RIGHT_ARROW_KEY_CODE","UP_ARROW_KEY_CODE","DOWN_ARROW_KEY_CODE","ui","setFocus","pauseSpatialNavigation","resumeSpatialNavigation","focus","setCurrentFocusState","overlayRef","setCurrentFocus","FOCUS_MAP","gotoPage","routes","MAP","setTimeout","opacity","remove","onKeydown","event","preventDefault","cancelBubble","includes","keyCode","nextFocusKey","startsWith","focusedItemId","replace","removeFromCart","addToCart","slideQuantity","alert","window","document","addEventListener","removeEventListener","NavigationRightElement","Address","onEnterPress","Navigation","title","rightElement","Container","Row","Col","s","m","l","xl","device","module","exports"],"mappings":"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","file":"static/js/4.cfb3f6cb.chunk.js","sourcesContent":["import React from 'react';\nimport Typography from 'components/Typography';\n\nimport withBem from 'hoc/withBem';\n\nimport './style.scss';\n\ninterface DeliveryTimeProps {\n    time?: string;\n}\n\nconst DeliveryTime: React.FC<DeliveryTimeProps & BemProps> = ({bem, time}) => {\n    return (\n        <div className={bem()}>\n            <div className={bem('icon')} />\n            <div className={bem('block')}>\n                <div>\n                    <Typography type=\"subheader\">Доставим за</Typography>\n                </div>\n                <div>\n                    <Typography type=\"subheaderDescription\">{time}</Typography>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default withBem(DeliveryTime, 'DeliveryTime');\n","import React from 'react';\n\nimport withBem from 'hoc/withBem';\nimport './style.scss';\n\nconst DEFAULT_OVERLAP_HEIGHT = 40;\nconst DEFAULT_SCROLLWRAPPER_HEIGHT = 220;\nconst DEFAULT_MAX_ITEMS_COUNT = 3;\n\ninterface ScrollWrapperProps {\n    height: string | number;\n    itemsCount: number;\n    activeItemIndex: number;\n    maxItemsCount: number;\n}\n\nconst ScrollWrapper: React.FC<ScrollWrapperProps & BemProps> = ({\n    bem,\n    height,\n    children,\n    itemsCount,\n    maxItemsCount = DEFAULT_MAX_ITEMS_COUNT, activeItemIndex\n}) => {\n    const scrollbar = React.useRef<HTMLDivElement>(null);\n    const childrenRef = React.useRef<HTMLDivElement>(null);\n\n    const [state, setState] = React.useState({\n        topOverlap: false,\n        bottomOverlap: itemsCount > maxItemsCount,\n    });\n\n    const checkBottomOverlapNeedShow = (): boolean => {\n        if (childrenRef.current && scrollbar.current) {\n            return childrenRef.current.offsetHeight\n                >= scrollbar.current.scrollTop + DEFAULT_OVERLAP_HEIGHT + scrollbar.current.clientHeight;\n        }\n\n        return false;\n    };\n\n    const handleOnScroll = (): void => {\n        if (scrollbar.current) {\n            const topScroll = scrollbar.current.scrollTop;\n            const checkTopOverlapNeedShow = topScroll >= DEFAULT_OVERLAP_HEIGHT;\n        \n            setState({\n                topOverlap: checkTopOverlapNeedShow,\n                bottomOverlap: checkBottomOverlapNeedShow(),\n            });\n        }\n    };\n    \n\n    React.useEffect(() => {\n        if (childrenRef.current && scrollbar.current && activeItemIndex !== -1) {\n            const itemPadding = childrenRef.current.clientHeight / itemsCount;\n            scrollbar.current.scrollTo({top: itemPadding * activeItemIndex, behavior: 'smooth'});\n            handleOnScroll();\n        }\n    }, [activeItemIndex]); // eslint-disable-line\n\n    const {topOverlap, bottomOverlap} = state;\n    const cssHeight = height || DEFAULT_SCROLLWRAPPER_HEIGHT;\n    const style = {\n        height: `calc(100vh * ${cssHeight} / 540)`,\n    };\n\n    return (\n        <div style={style} className={bem.modify({topOverlap, bottomOverlap})}>\n            <div\n                style={style}\n                onScroll={handleOnScroll}\n                className={bem('inner')}\n                ref={scrollbar}\n            >\n                <div ref={childrenRef}>\n                    {children}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default withBem(ScrollWrapper);\n","import React from 'react';\nimport {withFocusable, FocusableProps, Layout} from '@noriginmedia/react-spatial-navigation';\nimport {connectToStore} from 'tools/connect';\n\nimport {StoreType} from 'stores';\nimport {ProductItemModel} from 'stores/product';\n\nimport ScrollWrapper from 'components/ScrollWrapper';\nimport Typography from 'components/Typography';\nimport Card from 'components/Card';\n\nimport withBem from 'hoc/withBem';\n\nimport './style.scss';\n\ninterface QuantitySliderProps {\n    quantity: number;\n    focused: boolean;\n}\n\nconst Quantity: React.FC<BemProps & QuantitySliderProps > = ({bem, quantity, focused}) => {\n    return (\n        <div className={bem('quantitySlider')}>\n            {focused && <span className={bem('qtyIconLess')} />}\n            <div className={bem.modify({focused}, 'qtyItems')}>\n                <span className={bem('qtyItem')}>\n                    {quantity}\n                </span>\n            </div>\n            {focused && <span className={bem('qtyIconMore')} />}\n        </div>\n    );\n};\n\ninterface CartRowProps extends ProductItemModel {\n    index: number;\n}\n\nconst CartRow: React.FC<CartRowProps & BemProps & StoreType & FocusableProps> = ({\n    bem,\n    name,\n    focused,\n    price,\n    id,\n    index,\n    cart,\n    imagesUrls,\n    clearName,\n}) => {\n    if (!cart.itemsMap[id]) {\n        return null;\n    }\n\n    const quantity = cart.itemsMap[id].length;\n    \n    return (\n        <tr className={bem()}>\n            <td className={bem('cell', 'index')}>\n                {index}\n            </td>\n            <td className={bem('cell', 'imgCell')}>\n                <Card index={false}>\n                    <img src={imagesUrls[0]} alt={clearName} className={bem('img')} />\n                </Card>\n            </td>\n            <td className={bem('description', 'cell')}>\n                <div className={bem('row')}>\n                    <Typography type=\"title\">{name}</Typography>\n                </div>\n                <div>\n                    <Typography type=\"subheaderDescription\">{price}₽</Typography>\n                </div>\n            </td>\n            <td className={bem('quantity', 'cell')}>\n                <div className={bem('quantityIcons')}>\n                    <Quantity focused={focused} bem={bem} quantity={quantity} />\n                </div>\n            </td>\n        </tr>\n    );\n};\n\nconst FocusableProductCart = withFocusable()(withBem(connectToStore(CartRow), 'CartRow'));\n\nconst Button: React.FC<BemProps & FocusableProps> = ({focused, bem, children}) => {\n    return (\n        <button type=\"button\" className={bem.modify({focused}, 'button')}>\n            {children}\n        </button>\n    );\n};\n\nconst FocusableButton = withFocusable()(Button);\n\n\ninterface CartTableType {\n    activeItemIndex: string;\n}\n\nconst MAX_ITEMS_COUNT = 3;\nconst CART_HEIGHT_PX = 280;\n\nconst CartTable: React.FC<StoreType & FocusableProps & BemProps & CartTableType> = ({cart, bem, activeItemIndex}) => {\n    const itemsCount = Object.keys(cart.itemsMap).length;\n\n    const scrollableContent = (\n        <table className={bem('table')}>\n            <tbody>\n                {\n                    Object.entries(cart.itemsMap).map((([itemId, items], index) => {\n                        const focusKey = 'CART_ITEM_' + itemId;\n                        return (\n                            <FocusableProductCart\n                                {...items[0]}\n                                focusKey={focusKey}\n                                index={index + 1}\n                                key={itemId}\n                            />\n                        );\n                    }))\n                }\n            </tbody>\n        </table>\n    );\n\n    return (\n        <div className={bem()}>\n            <div className={bem('tableWrapper')}>\n                {itemsCount > MAX_ITEMS_COUNT ? (\n                    <ScrollWrapper height={CART_HEIGHT_PX} activeItemIndex={activeItemIndex} itemsCount={itemsCount}>\n                        {scrollableContent}\n                    </ScrollWrapper>\n                ) : scrollableContent}\n            </div>\n            <FocusableButton bem={bem} focusKey=\"PAY_BUTTON\">\n                <Typography type=\"subheader\">К оплате {cart.totalPrice} ₽</Typography>\n            </FocusableButton>\n        </div>\n    );\n};\n\nconst ConnectedList = withBem(connectToStore(CartTable), 'CartTable');\n\nexport default ConnectedList;\n","export default function findNextFocusKey(map: Array<string[]>, direction: 'up' | 'down', focusKey: string): string {\n    const [currentRowIndex, rowItems] = map\n        .map((elem, index): [number, string[]] => ([index, elem]))\n        .find((e) => e[1].indexOf(focusKey) !== -1) || [0, map[0]];\n    const currentItemIndex = rowItems.indexOf(focusKey);\n\n    if (direction === 'up') {\n        if (currentItemIndex === 0) {\n            const nextRowIndex = currentRowIndex - 1 < 0 ? map.length - 1 : currentRowIndex - 1;\n            return map[nextRowIndex][0];\n        }\n        return map[currentRowIndex][currentItemIndex - 1];\n    }\n    if (currentItemIndex === rowItems.length - 1) {\n        const nextRowIndex = currentRowIndex + 1 > map.length - 1 ? 0 : currentRowIndex + 1;\n        return map[nextRowIndex][0];\n    }\n\n    return map[currentRowIndex][currentItemIndex + 1];\n}\n","import React from 'react';\nimport {\n    withFocusable,\n    FocusableProps,\n} from '@noriginmedia/react-spatial-navigation';\n\nimport Container from 'components/Grids/Container';\nimport Row from 'components/Grids/Row';\nimport Col from 'components/Grids/Col';\nimport Typography from 'components/Typography';\nimport Navigation from 'containers/Navigation';\nimport Address from 'containers/Address';\nimport DeliveryTime from 'containers/DeliveryTime';\nimport CartTable from 'containers/CartTable';\n\nimport {routes} from 'stores/ui';\nimport {connectToStore} from 'tools/connect';\nimport findNextFocusKey from 'tools/spatial-navigation';\n\nimport {StoreType} from 'stores';\n\nimport './style.scss';\n\nimport device from './device.svg';\n\nconst LEFT_ARROW_KEY_CODE = 37;\nconst RIGHT_ARROW_KEY_CODE = 39;\nconst UP_ARROW_KEY_CODE = 38;\nconst DOWN_ARROW_KEY_CODE = 40;\nconst ENTER_KEY_CODE = 13;\n\nconst ACCENT_DELAY_TIMEOUT = 2500;\n\nconst CartPage: React.FC<StoreType & FocusableProps> = ({ui, cart, setFocus, pauseSpatialNavigation, resumeSpatialNavigation}) => {\n    const [focus, setCurrentFocusState] = React.useState('PAY_BUTTON');\n    const overlayRef = React.useRef<HTMLDivElement>(null);\n\n    const setCurrentFocus = (key: string): void => {\n        setCurrentFocusState(key);\n        setFocus(key);\n    };\n\n    const FOCUS_MAP: Array<string[]> = [\n        [\n            'NAVIGATION_ADDRESS',\n        ],\n        Object.keys(cart.itemsMap).map((itemId) => {\n            return 'CART_ITEM_' + itemId;\n        }),\n        [\n            'PAY_BUTTON',\n        ],\n    ];\n\n    const animateAccent = (): void => {\n        setTimeout(() => {\n            if (overlayRef.current) {\n                overlayRef.current.style.opacity = '0';\n                setTimeout(() => {\n                    if (overlayRef.current) {\n                        overlayRef.current.remove();\n                    }\n                }, 500);\n            }\n        }, ACCENT_DELAY_TIMEOUT);\n    };\n\n    const slideQuantity = (keyCode: number): void => {\n        const focusedItemId = focus.replace('CART_ITEM_', '');\n        if (focus.startsWith('CART_ITEM')) {\n            if (keyCode === LEFT_ARROW_KEY_CODE) {\n                if (cart.itemsMap[focusedItemId].length === 1) {\n                    const nextFocusKey = findNextFocusKey(FOCUS_MAP, 'down', focus);\n                    setCurrentFocus(nextFocusKey);\n                }\n                cart.removeFromCart(focusedItemId);\n            } else {\n                cart.addToCart(focusedItemId);\n            }\n        }\n    };\n\n    React.useEffect(() => {\n        if (Object.entries(cart.itemsMap).length === 0) {\n            return ui.gotoPage(routes.MAP);\n        }\n\n        animateAccent();\n        setFocus(focus);\n\n        const onKeydown = (event: KeyboardEvent): void => {\n            event.preventDefault();\n            event.cancelBubble = true;\n\n            const isUpOrDown = [UP_ARROW_KEY_CODE, DOWN_ARROW_KEY_CODE].includes(event.keyCode);\n            if (isUpOrDown) {\n                const direction = event.keyCode === UP_ARROW_KEY_CODE ? 'up' : 'down';\n                const nextFocusKey = findNextFocusKey(FOCUS_MAP, direction, focus);\n                return setCurrentFocus(nextFocusKey);\n            }\n\n            const isLeftOrRight = [LEFT_ARROW_KEY_CODE, RIGHT_ARROW_KEY_CODE].includes(event.keyCode);\n\n            if (isLeftOrRight && focus.startsWith('CART_ITEM')) {\n                return slideQuantity(event.keyCode);\n            }\n\n            if (event.keyCode === ENTER_KEY_CODE) {\n                if (focus === 'NAVIGATION_ADDRESS') {\n                    ui.gotoPage(routes.MAP);\n                } else if (focus === 'PAY_BUTTON') {\n                    alert('PAY');\n                }\n            }\n        };\n\n        window.document.addEventListener('keydown', onKeydown);\n        \n        pauseSpatialNavigation();\n\n        return (): void => {\n            window.document.removeEventListener('keydown', onKeydown);\n            resumeSpatialNavigation();\n        };\n    });\n\n    const NavigationRightElement = (\n        <>\n            <DeliveryTime time=\"12 минут\" />\n            <Address onEnterPress={(): void => ui.gotoPage(routes.MAP)} focusKey=\"NAVIGATION_ADDRESS\" />\n        </>\n    );\n        \n    return (\n        <>\n            <Navigation title=\"Корзина\" rightElement={NavigationRightElement} />\n            <Container className=\"CartPage__container\">\n                <Row className=\"CartPage__row\">\n                    <Col s={2} m={3} l={4} xl={6}>\n                        <CartTable activeItemIndex={FOCUS_MAP[1].indexOf(focus)} />\n                    </Col>\n                    <Col s={2} m={3} l={4} xl={6} className=\"CartPage__text\">\n                        <div className=\"CartPage__acent\">\n                            <div className=\"CartPage__overlay\" ref={overlayRef} />\n                            <div className=\"CartPage__visible\">\n                                <img src={device} className=\"CartPage__icon\" alt=\"Иконка телефона\" />\n                                <p>\n                                    <Typography type=\"subheaderDescription\">Мы отправили уведомление вам на телефон</Typography>\n                                </p>\n                                <p>\n                                    <Typography type=\"header\">Укажите в приложении квартиру и номер телефона, чтобы заказать продукты</Typography>\n                                </p>\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </Container>\n        </>\n    );\n};\n\nexport default withFocusable()(connectToStore(CartPage));\n","module.exports = __webpack_public_path__ + \"static/media/device.29dc30b4.svg\";"],"sourceRoot":""}