{"version":3,"sources":["hoc/withBem.tsx","components/Typography/index.tsx","components/Grids/Container/index.tsx","components/Grids/Row/index.tsx","containers/Navigation/index.tsx","components/Grids/Col/index.tsx","tools/bem.ts"],"names":["Component","componentName","props","context","bem","Bem","name","withBem","children","className","type","decoration","decorationClass","mod","all","Container","Row","noGutters","verticalPadding","topPadding","bottomPadding","style","styles","paddingTop","paddingBottom","elClassname","connectToStore","ui","back","title","subtitle","rightElement","s","m","l","xl","onClick","gotoPage","SIZES","Col","sizeClasses","map","size","sizeProp","join","hiddenClasses","autoClasses","offsetClasses","Fragment","PREFIX","config","cssPrefix","blockName","delimeter","modDelimeter","renderer","elements","length","element","elem","modVal","modify","conditions","elemToModify","Object","entries","predicate","Boolean","filter","values"],"mappings":"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","file":"static/js/0.d492ab69.chunk.js","sourcesContent":["import React from 'react';\n\nimport Bem from 'tools/bem';\n\nexport default (Component: React.FC<any>, componentName?: string) => {\n    return (props?: any, context?: any) => (\n        <Component {...props} context={context} bem={Bem(componentName || Component.name)} />\n    );\n};\n","import React from 'react';\n\nimport withBem from 'hoc/withBem';\nimport './style.scss';\n\ntype TypographyType = 'header' | 'subheader' | 'body'\ntype DecorationType = 'strikeThrough' | 'underline'\ninterface TypographyProps {\n    children: React.ReactNode;\n    className?: string;\n    type: TypographyType;\n    bem: BemRenderer;\n    decoration?: DecorationType;\n}\n\nconst Typography: React.FC<TypographyProps> = ({children, className = '', type, bem, decoration}) => {\n    const decorationClass = decoration ? bem.mod(decoration) : '';\n\n    return (\n        <span className={bem.all(bem(), bem.mod(type), className, decorationClass)}>\n            {children}\n        </span>\n    );\n};\n\nexport default withBem(Typography, 'Typography');\n","import React from 'react';\n\nimport './style.scss';\n\ninterface ContainerProps {\n    children: React.ReactNode;\n    className?: string;\n    fluid?: boolean;\n    [key: string]: any;\n}\n\nconst Container: React.FC<ContainerProps> = ({children, className = '', ...props}) => (\n    <div className={`sb-Container ${className}`} {...props}>\n        {children}\n    </div>\n);\n\nexport default Container;\n","import React from 'react';\n\nimport './style.scss';\n\ninterface RowProps {\n    children: React.ReactNode;\n    className?: string;\n    verticalPadding?: string | number;\n    topPadding?: string | number;\n    bottomPadding?: string | number;\n    noGutters?: boolean;\n    style?: {[key: string]: string};\n    [key: string]: any;\n}\n\nconst Row: React.FC<RowProps> = ({children, className = '', noGutters = false, verticalPadding, topPadding, bottomPadding, style = {}, ...props}) => {\n    const styles = {\n        ...style,\n        paddingTop: `${verticalPadding || topPadding}px`,\n        paddingBottom: `${verticalPadding || bottomPadding}px`,\n    };\n\n    const elClassname = `sb-Row ${noGutters ? 'sb-Row_noGutters' : ''}`;\n\n    return (\n        <div style={styles} className={`${elClassname} ${className}`} {...props}>\n            {children}\n        </div>\n    );\n};\n\nexport default Row;\n","import React from 'react';\nimport {StoreType} from 'stores/types';\n\nimport Typography from 'components/Typography';\nimport Row from 'components/Grids/Row';\nimport Col from 'components/Grids/Col';\nimport Container from 'components/Grids/Container';\n\nimport withBem from 'hoc/withBem';\nimport {connectToStore} from 'tools/connect';\n\nimport './style.scss';\n\ninterface NavigationProps {\n    title: string;\n    subtitle?: string;\n    back?: string;\n    rightElement: React.ReactNode;\n}\n\nconst Navigation: React.FC<StoreType & NavigationProps & BemProps> = ({bem, ui, back, title, subtitle, rightElement}) => {\n    const goBack = () => back && ui.gotoPage(back);\n\n    return (\n        <Container>\n            <Row>\n                <Col s={4} m={6} l={8} xl={12}>\n                    <nav className={bem()}>\n                        {back && <span className={bem('back')} onClick={goBack} />}\n                        <section className={bem('defineBlock')}>\n                            <div className={bem('logo')} />\n                            <div className={bem('defineData')}>\n                                <div>\n                                    <Typography type={subtitle ? 'subheader' : 'header'}>{title}</Typography>\n                                </div>\n                                {subtitle && (\n                                    <div>\n                                        <Typography type=\"subheaderDescription\">{subtitle}</Typography>\n                                    </div>\n                                )}\n                            </div>\n                        </section>\n\n                        <section className={bem('defineBlock')}>\n                            {rightElement}\n                        </section>\n                    </nav>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default connectToStore(withBem(Navigation, 'Navigation'));\n","import React from 'react';\n\nimport './style.scss';\n\ntype SizeType = 's' | 'm' | 'l' | 'xl';\n\nconst SIZES: SizeType[] = ['s', 'm', 'l', 'xl'];\n\ninterface CellProps {\n    className?: string;\n    verticalPadding?: number | string;\n    topPadding?: number | string;\n    bottomPadding?: number | string;\n    s?: number | string;\n    m?: number | string;\n    l?: number | string;\n    xl?: number | string;\n    [key: string]: any;\n}\n\nconst Col: React.FC<CellProps> = (props) => {\n    const {children, className = '', verticalPadding, topPadding, bottomPadding, style = {}} = props;\n\n    const sizeClasses = SIZES.map((size: SizeType) => {\n        const sizeProp = props[size];\n        return sizeProp ? `sb-Col${size === 's' ? '' : '-' + size}-${sizeProp}` : '';\n    }).join(' ');\n\n    const hiddenClasses = SIZES.map((size) => {\n        const sizeProp = props[`${size}Hidden`];\n        return sizeProp ? `sb-Col-${size}-hidden` : '';\n    }).join(' ');\n\n    const autoClasses = SIZES.map((size) => {\n        const sizeProp = props[`${size}Auto`];\n        return sizeProp ? `sb-Col${size === 's' ? '' : '-' + size}-auto` : '';\n    }).join(' ');\n\n    const offsetClasses = SIZES.map((size) => {\n        const sizeProp = props[`${size}Offset`];\n        return sizeProp ? `sb-Col-offset${size === 's' ? '' : '-' + size}-${sizeProp}` : '';\n    }).join(' ');\n\n    const styles = {\n        ...style,\n        paddingTop: `${verticalPadding || topPadding}px`,\n        paddingBottom: `${verticalPadding || bottomPadding}px`,\n    };\n\n    return (\n        <React.Fragment>\n            <div style={styles} className={`sb-Col ${sizeClasses} ${hiddenClasses} ${autoClasses} ${offsetClasses}`}>\n                <div className={`sb-Col__content ${className}`}>\n                    {children}\n                </div>\n                <div className=\"sb-Col__gutter\" />\n            </div>\n            \n        </React.Fragment>\n    );\n};\n\nexport default Col;\n","import config from 'configs';\n\nconst PREFIX = config.cssPrefix || '';\n\ninterface ConfitionsInterface<T> {\n    T?: boolean;\n}\n\nexport default (\n    blockName: string,\n    delimeter = '__',\n    modDelimeter = '_',\n): BemRenderer => {\n    function renderer(...elements: string[]): string {\n        if (!elements.length) {\n            return PREFIX + blockName;\n        }\n\n        return elements.map((element) => {\n            return PREFIX + blockName + delimeter + element;\n        }).join(' ');\n    }\n\n    renderer.elem = (element: string, mod: string, modVal?: string): string => {\n        return PREFIX + blockName + delimeter + element + modDelimeter + mod + (modVal ? modDelimeter + modVal : '');\n    };\n\n    renderer.mod = (mod: string, modVal?: string): string => {\n        return PREFIX + blockName + modDelimeter + mod + (modVal ? modDelimeter + modVal : '');\n    };\n\n    renderer.modify = (conditions: ConfitionsInterface<string> = {}, elem?: string): string => {\n        const elemToModify = elem ? blockName + delimeter + elem : blockName;\n\n        return PREFIX + elemToModify + ' ' + Object.entries(conditions).map(([mod, predicate]) => {\n            return Boolean(predicate) && (PREFIX + elemToModify + modDelimeter + mod);\n        }).filter(Boolean).join(' ');\n    };\n\n    renderer.all = (...values: string[]): string => values.join(' ');\n\n    return renderer;\n};\n"],"sourceRoot":""}